/**	
 *  @file cpmu.c
 *  
 * 	@brief Contains Clock and power management unit API routines for MagniV devices.
 * 	
 *	@author Manuel Rodriguez
 *  
 */
/*
 * History:
 * 
 * 		Rev 1.0 Initial Release
 * 		
 * */

#include "cpmu.h"



/** Initializes the Bus clock at the desired speed usign the internal oscillator.
 * 
 * 	@param[in] BusClock Desired Bus Clock Frequency in hertz
 * 	
 * */
void clock_init(unsigned long BusClock){
	clock_dividers prescalers;
	prescalers = calc_prs(BusClock*2);
}

//TODO clock init for external oscillator

/** Calculate the prescaler values for the corresponding bus frequency.
 * 
 * @param[in] FPLL Desired PLL frequency (bus frequency * 2) in hertz
 * @param[in] ExtClock If an External oscillator is being used set this variable to TRUE (1) otherwise set to FALSE (0)
 * @param[in] ExtFreq  If an oscillator is being used pass the frequency of the oscillator, otherwise pass FALSE (0)
 * 
 * @return A structure with the values of the prescalers
 * 
 * */
clock_dividers calc_prs(unsigned long FPLL, unsigned char ExtClock, unsigned long ExtFreq){
	clock_dividers prs;
	unsigned long Fref;
	
	/* Check if an external oscillator is being used */
	if(ExtClock == TRUE){
		if(!(ExtFreq % IRC)){	/* Check if ExtFreq is an integer multiple of IRC */
			prs.refdiv = (ExtFreq / IRC) - 1;	/* Fref = Fosc / (REFDIV + 1) */
			Fref = IRC;
		} // TODO if not select the best Fref (integer multiple for FVCO)
	} else
		Fref = IRC;
	
	/* Check if Fpll = Fvco is possible */
	if((FPLL >= VCO_MIN) && (FPLL <= VCO_MAX)){
		//TODO check for not an exact frequency
		prs.postdiv = 0;		/* FPLL = FVCO / (POSTDIV + 1) -> FPLL = FVCO */
		prs.syndiv = (FPLL / (2 * Fref)) - 1;
	} // TODO implement prescaler search
	
	return prs;
}
